using AutoMapper;
using LCH.MercedesBenz.Api.Models.Application.InternalVersionSegmentations.Dtos;

namespace LCH.MercedesBenz.Api.Models.Application.InternalVersionSegmentations
{
    public class InternalVersionSegmentationProfile : Profile
    {
        public InternalVersionSegmentationProfile()
        {
            CreateMap<InternalVersionSegmentationDto, InternalVersionSegmentation>()
                .ForMember(dest => dest.AutoId, act => act.MapFrom(src => 0));

            CreateMap<InternalVersionSegmentationCreateDto, InternalVersionSegmentation>()
             .ForMember(dest => dest.AutoId, act => act.MapFrom(src => 0))
             .ForMember(dest => dest.Cat_InternalVersion, opt => opt.Ignore())
             .ForMember(dest => dest.Category, opt => opt.Ignore())
             .ForMember(dest => dest.Segment, opt => opt.Ignore())
             .ForMember(dest => dest.BodyStyle, opt => opt.Ignore())
             .ForMember(dest => dest.Bodywork, opt => opt.Ignore())
             .ForMember(dest => dest.Subsegment, opt => opt.Ignore())
             .ForMember(dest => dest.Power, opt => opt.Ignore())
             .ForMember(dest => dest.Traction, opt => opt.Ignore())
             .ForMember(dest => dest.Usage, opt => opt.Ignore())
             .ForMember(dest => dest.FuelType, opt => opt.Ignore())
             .ForMember(dest => dest.FuelTypeId, opt => opt.MapFrom(src => src.FuelTypeId))
             .ForMember(dest => dest.AMGCompSet, opt => opt.Ignore())
             .ForMember(dest => dest.AMGCompSetId, opt => opt.MapFrom(src => src.AMGCompSetId))
             .ForMember(dest => dest.Doors, opt => opt.Ignore())
             .ForMember(dest => dest.DoorId, opt => opt.MapFrom(src => src.DoorsId))
             .ForMember(dest => dest.Source, opt => opt.Ignore())
             .ForMember(dest => dest.SourceId, opt => opt.MapFrom(src => src.SourceId))
             .ForMember(dest => dest.MCGTotalMkt, opt => opt.Ignore())
             .ForMember(dest => dest.MCGTotalMktId, opt => opt.MapFrom(src => src.MCGTotalMktId))
             .ForMember(dest => dest.MotorDT, opt => opt.Ignore())
             .ForMember(dest => dest.MotorDTId, opt => opt.MapFrom(src => src.MotorDTId))
             .ForMember(dest => dest.ApertureOneId, opt => opt.MapFrom(src => src.Apertura1Id ))
             .ForMember(dest => dest.ApertureTwoId, opt => opt.MapFrom(src => src.Apertura2Id ))
             .ForMember(dest => dest.ApertureThreeId, opt => opt.MapFrom(src => src.Apertura3Id ))
             .ForMember(dest => dest.ApertureFourId, opt => opt.MapFrom(src => src.Apertura4Id ))
             .ForMember(dest => dest.Apertura1, opt => opt.Ignore())
             .ForMember(dest => dest.Apertura2, opt => opt.Ignore())
             .ForMember(dest => dest.Apertura3, opt => opt.Ignore())
             .ForMember(dest => dest.Apertura4, opt => opt.Ignore())
             .ForMember(dest => dest.CJDCompetitive, opt => opt.Ignore())
             .ForMember(dest => dest.CJDCompetitiveId, opt => opt.MapFrom(src => src.CJDCompetitiveId))
             .ForMember(dest => dest.EngineCapacity, opt => opt.Ignore())
             .ForMember(dest => dest.EngineCapacityId, opt => opt.MapFrom(src => src.EngineCapacityId))
             .ForMember(dest => dest.CabinaCF, opt => opt.Ignore())
             .ForMember(dest => dest.CabinCFId, opt => opt.MapFrom(src => src.CabinaCFId))
             .ForMember(dest => dest.CabinaSD, opt => opt.Ignore())
             .ForMember(dest => dest.CabinSDId, opt => opt.MapFrom(src => src.CabinaSDId))
             .ForMember(dest => dest.CompetitiveCJD, opt => opt.Ignore())
             .ForMember(dest => dest.CompetitiveCJDId, opt => opt.MapFrom(src => src.CompetitiveCJDId))
             .ForMember(dest => dest.AltBodyst, opt => opt.Ignore())
             .ForMember(dest => dest.AltBodystId, opt => opt.MapFrom(src => src.AltBodystId))
             .ForMember(dest => dest.AltCateg, opt => opt.Ignore())
             .ForMember(dest => dest.AltCategId, opt => opt.MapFrom(src => src.AltCategId))
             .ForMember(dest => dest.AltSegm, opt => opt.Ignore())
             .ForMember(dest => dest.AltSegmId, opt => opt.MapFrom(src => src.AltSegmId))
             .ForMember(dest => dest.PBT_TN, opt => opt.Ignore())
             .ForMember(dest => dest.PBTTNId, opt => opt.MapFrom(src => src.PBT_TNId))
             .ForMember(dest => dest.NI, opt => opt.Ignore())
             .ForMember(dest => dest.NIId, opt => opt.MapFrom(src => src.NIId))
             .ForMember(dest => dest.RelevMB, opt => opt.Ignore())
             .ForMember(dest => dest.RelevMBId, opt => opt.MapFrom(src => src.RelevMBId))
             .ForMember(dest => dest.SegmentationAux1, opt => opt.Ignore())
             .ForMember(dest => dest.SegmentationAux1Id, opt => opt.MapFrom(src => src.SegmentationAux1Id))
             .ForMember(dest => dest.SSegm, opt => opt.Ignore())
             .ForMember(dest => dest.SSegmId, opt => opt.MapFrom(src => src.SSegmId))
             .ForMember(dest => dest.Configuration, opt => opt.Ignore())
             .ForMember(dest => dest.ConfigurationId, opt => opt.MapFrom(src => src.MercedesConfigurationId))
             .ForMember(dest => dest.WheelBase, opt => opt.Ignore())
             .ForMember(dest => dest.WheelBaseId, opt => opt.MapFrom(src => src.WheelBaseId))
             .ForMember(dest => dest.AxleBase, opt => opt.Ignore())
             .ForMember(dest => dest.AxleBaseId, opt => opt.MapFrom(src => src.AxleBaseId))
             .ForMember(dest => dest.Gears, opt => opt.Ignore())
             .ForMember(dest => dest.GearId, opt => opt.MapFrom(src => src.GearsId))
             .ForMember(dest => dest.Rule, opt => opt.Ignore())
             .ForMember(dest => dest.PBT, opt => opt.Ignore())
             .ForMember(dest => dest.PBTId, opt => opt.MapFrom(src => src.MercedesPBTId))
             .ForMember(dest => dest.CatRule, opt => opt.Ignore())
             .ForMember(dest => dest.CatRuleId, opt => opt.MapFrom(src => src.CatRuleId))
             .ForMember(dest => dest.Group, opt => opt.Ignore())
             .ForMember(dest => dest.GroupId, opt => opt.MapFrom(src => src.GroupId))
             ;


            CreateMap<InternalVersionSegmentationUpdateDto, InternalVersionSegmentation>()
             .ForMember(dest => dest.AutoId, act => act.MapFrom(src => 0))
             .ForMember(dest => dest.Cat_InternalVersion, opt => opt.Ignore())
             .ForMember(dest => dest.Category, opt => opt.Ignore())
             .ForMember(dest => dest.Segment, opt => opt.Ignore())
             .ForMember(dest => dest.BodyStyle, opt => opt.Ignore())
             .ForMember(dest => dest.BodyStyleId, opt => opt.MapFrom(src => src.BodyStyleId.HasValue ? src.BodyStyleId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.Bodywork, opt => opt.Ignore())
             .ForMember(dest => dest.BodyworkId, opt => opt.MapFrom(src => src.BodyworkId.HasValue ? src.BodyworkId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.Subsegment, opt => opt.Ignore())
             .ForMember(dest => dest.SubsegmentId, opt => opt.MapFrom(src => src.SubsegmentId.HasValue ? src.SubsegmentId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.Power, opt => opt.Ignore())
             .ForMember(dest => dest.PowerId, opt => opt.MapFrom(src => src.PowerId.HasValue ? src.PowerId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.Traction, opt => opt.Ignore())
             .ForMember(dest => dest.TractionId, opt => opt.MapFrom(src => src.TractionId.HasValue ? src.TractionId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.Usage, opt => opt.Ignore())
             .ForMember(dest => dest.UsageId, opt => opt.MapFrom(src => src.UsageId.HasValue ? src.UsageId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.FuelType, opt => opt.Ignore())
             .ForMember(dest => dest.FuelTypeId, opt => opt.MapFrom(src => src.FuelTypeId.HasValue ? src.FuelTypeId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.AMGCompSet, opt => opt.Ignore())
             .ForMember(dest => dest.AMGCompSetId, opt => opt.MapFrom(src => src.AMGCompSetId.HasValue ? src.AMGCompSetId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.Doors, opt => opt.Ignore())
             .ForMember(dest => dest.DoorId, opt => opt.MapFrom(src => src.DoorsId.HasValue ? src.DoorsId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.Source, opt => opt.Ignore())
             .ForMember(dest => dest.SourceId, opt => opt.MapFrom(src => src.SourceId.HasValue ? src.SourceId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.MCGTotalMkt, opt => opt.Ignore())
             .ForMember(dest => dest.MCGTotalMktId, opt => opt.MapFrom(src => src.MCGTotalMktId.HasValue ? src.MCGTotalMktId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.MotorDT, opt => opt.Ignore())
             .ForMember(dest => dest.MotorDTId, opt => opt.MapFrom(src => src.MotorDTId.HasValue ? src.MotorDTId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.ApertureOneId, opt => opt.MapFrom(src => src.Apertura1Id.HasValue ? src.Apertura1Id.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.ApertureTwoId, opt => opt.MapFrom(src => src.Apertura2Id.HasValue ? src.Apertura2Id.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.ApertureThreeId, opt => opt.MapFrom(src => src.Apertura3Id.HasValue ? src.Apertura3Id.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.ApertureFourId, opt => opt.MapFrom(src => src.Apertura4Id.HasValue ? src.Apertura4Id.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.Apertura1, opt => opt.Ignore())
             .ForMember(dest => dest.Apertura2, opt => opt.Ignore())
             .ForMember(dest => dest.Apertura3, opt => opt.Ignore())
             .ForMember(dest => dest.Apertura4, opt => opt.Ignore())
             .ForMember(dest => dest.CJDCompetitive, opt => opt.Ignore())
             .ForMember(dest => dest.CJDCompetitiveId, opt => opt.MapFrom(src => src.CJDCompetitiveId.HasValue ? src.CJDCompetitiveId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.EngineCapacity, opt => opt.Ignore())
             .ForMember(dest => dest.EngineCapacityId, opt => opt.MapFrom(src => src.EngineCapacityId.HasValue ? src.EngineCapacityId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.CabinaCF, opt => opt.Ignore())
             .ForMember(dest => dest.CabinCFId, opt => opt.MapFrom(src => src.CabinaCFId.HasValue ? src.CabinaCFId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.CabinaSD, opt => opt.Ignore())
             .ForMember(dest => dest.CabinSDId, opt => opt.MapFrom(src => src.CabinaSDId.HasValue ? src.CabinaSDId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.CompetitiveCJD, opt => opt.Ignore())
             .ForMember(dest => dest.CompetitiveCJDId, opt => opt.MapFrom(src => src.CompetitiveCJDId.HasValue ? src.CompetitiveCJDId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.AltBodyst, opt => opt.Ignore())
             .ForMember(dest => dest.AltBodystId, opt => opt.MapFrom(src => src.AltBodystId.HasValue ? src.AltBodystId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.AltCateg, opt => opt.Ignore())
             .ForMember(dest => dest.AltCategId, opt => opt.MapFrom(src => src.AltCategId.HasValue ? src.AltCategId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.AltSegm, opt => opt.Ignore())
             .ForMember(dest => dest.AltSegmId, opt => opt.MapFrom(src => src.AltSegmId.HasValue ? src.AltSegmId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.PBT_TN, opt => opt.Ignore())
             .ForMember(dest => dest.PBTTNId, opt => opt.MapFrom(src => src.PBT_TNId.HasValue ? src.PBT_TNId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.NI, opt => opt.Ignore())
             .ForMember(dest => dest.NIId, opt => opt.MapFrom(src => src.NIId.HasValue ? src.NIId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.RelevMB, opt => opt.Ignore())
             .ForMember(dest => dest.RelevMBId, opt => opt.MapFrom(src => src.RelevMBId.HasValue ? src.RelevMBId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.SegmentationAux1, opt => opt.Ignore())
             .ForMember(dest => dest.SegmentationAux1Id, opt => opt.MapFrom(src => src.SegmentationAux1Id.HasValue ? src.SegmentationAux1Id.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.SSegm, opt => opt.Ignore())
             .ForMember(dest => dest.SSegmId, opt => opt.MapFrom(src => src.SSegmId.HasValue ? src.SSegmId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.Configuration, opt => opt.Ignore())
             .ForMember(dest => dest.ConfigurationId, opt => opt.MapFrom(src => src.MercedesConfigurationId.HasValue ? src.MercedesConfigurationId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.WheelBase, opt => opt.Ignore())
             .ForMember(dest => dest.WheelBaseId, opt => opt.MapFrom(src => src.WheelBaseId.HasValue ? src.WheelBaseId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.AxleBase, opt => opt.Ignore())
             .ForMember(dest => dest.AxleBaseId, opt => opt.MapFrom(src => src.AxleBaseId.HasValue ? src.AxleBaseId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.Gears, opt => opt.Ignore())
             .ForMember(dest => dest.GearId, opt => opt.MapFrom(src => src.GearsId.HasValue ? src.GearsId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.Rule, opt => opt.Ignore())
             .ForMember(dest => dest.PBT, opt => opt.Ignore())
             .ForMember(dest => dest.PBTId, opt => opt.MapFrom(src => src.MercedesPBTId.HasValue ? src.MercedesPBTId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.CatRule, opt => opt.Ignore())
             .ForMember(dest => dest.CatRuleId, opt => opt.MapFrom(src => src.CatRuleId.HasValue ? src.CatRuleId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))
             .ForMember(dest => dest.Group, opt => opt.Ignore())
             .ForMember(dest => dest.GroupId, opt => opt.MapFrom(src => src.GroupId.HasValue ? src.GroupId.Value : Guid.Parse("00000000-0000-0000-0000-000000000033")))

             ;

        }
    }
}
